// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Duration struct {
	flatbuffers.Table
}

func GetRootAsDuration(buf []byte, offset flatbuffers.UOffsetT) (x Duration) {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset}
	return x
}

func FinishDurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDuration(buf []byte, offset flatbuffers.UOffsetT) (x Duration) {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset+flatbuffers.SizeUint32}
	return x
}

func FinishSizePrefixedDurationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Duration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv.Bytes = buf
	rcv.Pos = i
}

func (rcv *Duration) Unit() TimeUnit {
	o := flatbuffers.UOffsetT(rcv.Offset(4))
	if o != 0 {
		return TimeUnit(rcv.GetInt16(o + rcv.Pos))
	}
	return 1
}

func (rcv *Duration) MutateUnit(n TimeUnit) bool {
	return rcv.MutateInt16Slot(4, int16(n))
}

func DurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DurationAddUnit(builder *flatbuffers.Builder, unit TimeUnit) {
	builder.PrependInt16Slot(0, int16(unit), 1)
}
func DurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
