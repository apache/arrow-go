// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Message struct {
	flatbuffers.Table
}

func GetRootAsMessage(buf []byte, offset flatbuffers.UOffsetT) (x Message) {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset}
	return x
}

func FinishMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMessage(buf []byte, offset flatbuffers.UOffsetT) (x Message) {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset+flatbuffers.SizeUint32}
	return x
}

func FinishSizePrefixedMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Message) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv.Bytes = buf
	rcv.Pos = i
}

func (rcv *Message) Version() MetadataVersion {
	o := flatbuffers.UOffsetT(rcv.Offset(4))
	if o != 0 {
		return MetadataVersion(rcv.GetInt16(o + rcv.Pos))
	}
	return 0
}

func (rcv *Message) MutateVersion(n MetadataVersion) bool {
	return rcv.MutateInt16Slot(4, int16(n))
}

func (rcv *Message) HeaderType() MessageHeader {
	o := flatbuffers.UOffsetT(rcv.Offset(6))
	if o != 0 {
		return MessageHeader(rcv.GetByte(o + rcv.Pos))
	}
	return 0
}

func (rcv *Message) MutateHeaderType(n MessageHeader) bool {
	return rcv.MutateByteSlot(6, byte(n))
}

func (rcv *Message) Header(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv.Offset(8))
	if o != 0 {
		rcv.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Message) BodyLength() int64 {
	o := flatbuffers.UOffsetT(rcv.Offset(10))
	if o != 0 {
		return rcv.GetInt64(o + rcv.Pos)
	}
	return 0
}

func (rcv *Message) MutateBodyLength(n int64) bool {
	return rcv.MutateInt64Slot(10, n)
}

func (rcv *Message) CustomMetadata(obj *KeyValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv.Offset(12))
	if o != 0 {
		x := rcv.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv.Indirect(x)
		obj.Init(rcv.Bytes, x)
		return true
	}
	return false
}

func (rcv *Message) CustomMetadataLength() int {
	o := flatbuffers.UOffsetT(rcv.Offset(12))
	if o != 0 {
		return rcv.VectorLen(o)
	}
	return 0
}

func MessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MessageAddVersion(builder *flatbuffers.Builder, version MetadataVersion) {
	builder.PrependInt16Slot(0, int16(version), 0)
}
func MessageAddHeaderType(builder *flatbuffers.Builder, headerType MessageHeader) {
	builder.PrependByteSlot(1, byte(headerType), 0)
}
func MessageAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(header), 0)
}
func MessageAddBodyLength(builder *flatbuffers.Builder, bodyLength int64) {
	builder.PrependInt64Slot(3, bodyLength, 0)
}
func MessageAddCustomMetadata(builder *flatbuffers.Builder, customMetadata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(customMetadata), 0)
}
func MessageStartCustomMetadataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
