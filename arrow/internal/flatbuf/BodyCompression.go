// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Optional compression for the memory buffers constituting IPC message
/// bodies. Intended for use with RecordBatch but could be used for other
/// message types
type BodyCompression struct {
	flatbuffers.Table
}

func GetRootAsBodyCompression(buf []byte, offset flatbuffers.UOffsetT) (x BodyCompression) {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset}
	return x
}

func FinishBodyCompressionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBodyCompression(buf []byte, offset flatbuffers.UOffsetT) (x BodyCompression) {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset+flatbuffers.SizeUint32}
	return x
}

func FinishSizePrefixedBodyCompressionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BodyCompression) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv.Bytes = buf
	rcv.Pos = i
}

/// Compressor library.
/// For LZ4_FRAME, each compressed buffer must consist of a single frame.
func (rcv *BodyCompression) Codec() CompressionType {
	o := flatbuffers.UOffsetT(rcv.Offset(4))
	if o != 0 {
		return CompressionType(rcv.GetInt8(o + rcv.Pos))
	}
	return 0
}

/// Compressor library.
/// For LZ4_FRAME, each compressed buffer must consist of a single frame.
func (rcv *BodyCompression) MutateCodec(n CompressionType) bool {
	return rcv.MutateInt8Slot(4, int8(n))
}

/// Indicates the way the record batch body was compressed
func (rcv *BodyCompression) Method() BodyCompressionMethod {
	o := flatbuffers.UOffsetT(rcv.Offset(6))
	if o != 0 {
		return BodyCompressionMethod(rcv.GetInt8(o + rcv.Pos))
	}
	return 0
}

/// Indicates the way the record batch body was compressed
func (rcv *BodyCompression) MutateMethod(n BodyCompressionMethod) bool {
	return rcv.MutateInt8Slot(6, int8(n))
}

func BodyCompressionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BodyCompressionAddCodec(builder *flatbuffers.Builder, codec CompressionType) {
	builder.PrependInt8Slot(0, int8(codec), 0)
}
func BodyCompressionAddMethod(builder *flatbuffers.Builder, method BodyCompressionMethod) {
	builder.PrependInt8Slot(1, int8(method), 0)
}
func BodyCompressionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
