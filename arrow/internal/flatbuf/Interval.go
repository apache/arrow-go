// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Interval struct {
	flatbuffers.Table
}

func GetRootAsInterval(buf []byte, offset flatbuffers.UOffsetT) (x Interval) {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset}
	return x
}

func FinishIntervalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsInterval(buf []byte, offset flatbuffers.UOffsetT) (x Interval) {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset+flatbuffers.SizeUint32}
	return x
}

func FinishSizePrefixedIntervalBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Interval) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv.Bytes = buf
	rcv.Pos = i
}

func (rcv *Interval) Unit() IntervalUnit {
	o := flatbuffers.UOffsetT(rcv.Offset(4))
	if o != 0 {
		return IntervalUnit(rcv.GetInt16(o + rcv.Pos))
	}
	return 0
}

func (rcv *Interval) MutateUnit(n IntervalUnit) bool {
	return rcv.MutateInt16Slot(4, int16(n))
}

func IntervalStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func IntervalAddUnit(builder *flatbuffers.Builder, unit IntervalUnit) {
	builder.PrependInt16Slot(0, int16(unit), 0)
}
func IntervalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
